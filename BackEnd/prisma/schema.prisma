generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id_admin               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_admin           String
  apellido_paterno_admin String
  apellido_materno_admin String?
  email_admin            String   @unique
  telefono_admin         String?
  direccion_admin        String?
  contrase_a_admin       String   @map("contraseña_admin")
  fecha_registro         DateTime @default(now()) @db.Timestamptz(6)
  id_empresa             String   @db.Uuid
  empresa                empresa  @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_empresa")
}

model blog {
  id_blog           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titulo_blog       String
  contenido_blog    String
  categoria_blog    String?
  url_blog          String   @unique
  material_visual   String?
  fecha_publicacion DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  estado_blog       String
  id_empresa        String   @db.Uuid
  empresa           empresa  @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction, map: "fk_blog_empresa")
}

model clientes {
  id_cliente          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_cliente      String
  apellido_paterno    String
  apellido_materno    String?
  fecha_registro      DateTime              @default(now()) @db.Timestamptz(6)
  estado_cliente      String
  email_cliente       String                @unique
  telefono_cliente    String?
  token_cliente       String?
  direccion_cliente   String?
  id_inquilino        String                @db.Uuid
  inquilinos          inquilinos            @relation(fields: [id_inquilino], references: [id_inquilino], onDelete: NoAction, onUpdate: NoAction, map: "fk_clientes_inquilino")
  deudas              deudas[]
  historial_pagos     historial_pagos[]
  interaccion_chatbot interaccion_chatbot[]
}

model configuracion {
  id_configuracion         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  motivo                   String
  mensaje_pre_vencimiento  String
  mensaje_post_vencimiento String
  frecuencia               String
  medio                    String
  id_inquilino             String     @db.Uuid
  inquilinos               inquilinos @relation(fields: [id_inquilino], references: [id_inquilino], onDelete: NoAction, onUpdate: NoAction, map: "fk_configuracion_inquilino")
}

model cuentas_pago {
  id_cuenta           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_inquilino        String             @db.Uuid
  numero_cuenta       String             @unique
  fecha_registro      DateTime           @default(now()) @db.Timestamptz(6)
  fecha_actualizacion DateTime           @default(now()) @db.Timestamptz(6)
  nombre_banco        String
  titular_cuenta      String
  inquilinos          inquilinos         @relation(fields: [id_inquilino], references: [id_inquilino], onDelete: NoAction, onUpdate: NoAction, map: "fk_cuentas_inquilino")
  deudas              deudas[]
  transaccion_pago    transaccion_pago[]
}

model deudas {
  id_deuda          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  monto_original    Decimal            @db.Decimal(12, 2)
  saldo_pendiente   Decimal            @db.Decimal(12, 2)
  descripcion       String?
  fecha_emision     DateTime           @db.Date
  fecha_vencimiento DateTime           @db.Date
  estado_deuda      String
  tasa_interes      Decimal            @default(0) @db.Decimal(5, 2)
  id_cliente        String             @db.Uuid
  id_cuenta         String             @db.Uuid
  clientes          clientes           @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_deudas_cliente")
  cuentas_pago      cuentas_pago       @relation(fields: [id_cuenta], references: [id_cuenta], onDelete: NoAction, onUpdate: NoAction, map: "fk_deudas_cuenta")
  historial_pagos   historial_pagos[]
  transaccion_pago  transaccion_pago[]
}

model empresa {
  id_empresa           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_empresa       String
  direccion_empresa    String?
  logo_empresa         String?
  telefono_empresa     String?
  email_empresa        String
  mision_empresa       String?
  vision_empresa       String?
  terminos_condiciones String?
  politicas            String?
  fecha_actualizacion  DateTime         @default(now()) @db.Timestamptz(6)
  admin                admin[]
  blog                 blog[]
  redes_sociales       redes_sociales[]
}

model historial_pagos {
  id_pago           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referencia_pago   String?
  estado_pago       String
  concepto          String?
  fecha_pago        DateTime @default(now()) @db.Timestamptz(6)
  observaciones     String?
  importe           Decimal  @db.Decimal(12, 2)
  intentos_fallidos Int      @default(0)
  id_cliente        String   @db.Uuid
  id_deuda          String   @db.Uuid
  clientes          clientes @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_historial_cliente")
  deudas            deudas   @relation(fields: [id_deuda], references: [id_deuda], onDelete: NoAction, onUpdate: NoAction, map: "fk_historial_deuda")
}

model inquilinos {
  id_inquilino               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_inquilino           String
  apellido_paterno_inquilino String
  apellido_materno_inquilino String?
  email_inquilino            String          @unique
  telefono_inquilino         String?
  direccion_inquilino        String?
  estado_inquilino           Boolean         @default(true)
  fecha_registro             DateTime        @default(now()) @db.Timestamptz(6)
  contrase_a_inquilino       String          @map("contraseña_inquilino")
  foto_inquilino             String?
  clientes                   clientes[]
  configuracion              configuracion[]
  cuentas_pago               cuentas_pago[]
}

model interaccion_chatbot {
  id_interaccion    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mensaje_enviado   String?
  mensaje_recibido  String?
  fecha_interaccion DateTime @default(now()) @db.Timestamptz(6)
  id_cliente        String   @db.Uuid
  clientes          clientes @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_interaccion_cliente")
}

model pasarelas_pago {
  id_pasarela      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  proveedor        String
  config_api       Json?
  fecha_registro   DateTime           @default(now()) @db.Timestamptz(6)
  transaccion_pago transaccion_pago[]
}

model redes_sociales {
  id_red     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_red String
  logo_red   String?
  enlace     String
  id_empresa String  @db.Uuid
  empresa    empresa @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction, map: "fk_redes_empresa")
}

model transaccion_pago {
  id_transaccion     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  importe            Decimal        @db.Decimal(12, 2)
  moneda             String
  estado             String
  referencia_gateway String?
  respuesta_raw      Json?
  fecha_intento      DateTime       @default(now()) @db.Timestamptz(6)
  id_pasarela        String         @db.Uuid
  id_cuenta          String         @db.Uuid
  id_deuda           String         @db.Uuid
  cuentas_pago       cuentas_pago   @relation(fields: [id_cuenta], references: [id_cuenta], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaccion_cuenta")
  deudas             deudas         @relation(fields: [id_deuda], references: [id_deuda], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaccion_deuda")
  pasarelas_pago     pasarelas_pago @relation(fields: [id_pasarela], references: [id_pasarela], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaccion_pasarela")
}
