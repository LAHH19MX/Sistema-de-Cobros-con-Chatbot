generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id_admin               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_admin           String
  apellido_paterno_admin String
  apellido_materno_admin String?
  email_admin            String   @unique
  telefono_admin         String?
  direccion_admin        String?
  password               String
  fecha_registro         DateTime @default(now()) @db.Timestamptz(6)
  id_empresa             String   @db.Uuid
  Empresa                Empresa  @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_empresa")

  @@map("admin")
}

model Blog {
  id_blog           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titulo_blog       String
  contenido_blog    String
  categoria_blog    String?
  url_blog          String   @unique
  material_visual   String?
  fecha_publicacion DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  estado_blog       String

  @@map("blog")
}

model Cliente {
  id_cliente         String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_cliente     String
  apellido_paterno   String
  apellido_materno   String?
  fecha_registro     DateTime             @default(now()) @db.Timestamptz(6)
  estado_cliente     String
  email_cliente      String               @unique
  telefono_cliente   String?
  token_cliente      String?
  direccion_cliente  String?
  id_inquilino       String               @db.Uuid
  Inquilino          Inquilino            @relation(fields: [id_inquilino], references: [id_inquilino], onDelete: NoAction, onUpdate: NoAction, map: "fk_clientes_inquilino")
  Deuda              Deuda[]
  RecordatorioEmail  RecordatorioEmail[]
  HistorialPago      HistorialPago[]
  InteraccionChatbot InteraccionChatbot[]

  @@map("clientes")
}

model Configuracion {
  id_configuracion         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  motivo                   String
  mensaje_pre_vencimiento  String
  mensaje_post_vencimiento String
  medio                    String
  id_inquilino             String              @db.Uuid
  frecuencia               Int?
  Inquilino                Inquilino           @relation(fields: [id_inquilino], references: [id_inquilino], onDelete: NoAction, onUpdate: NoAction, map: "fk_configuracion_inquilino")
  RecordatorioEmail        RecordatorioEmail[]

  @@map("configuracion")
}

model Deuda {
  id_deuda          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  monto_original    Decimal         @db.Decimal(12, 2)
  saldo_pendiente   Decimal         @db.Decimal(12, 2)
  descripcion       String?
  fecha_emision     DateTime        @db.Date
  fecha_vencimiento DateTime        @db.Date
  estado_deuda      String
  tasa_interes      Decimal         @default(0) @db.Decimal(5, 2)
  id_cliente        String          @db.Uuid
  Cliente           Cliente         @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_deudas_cliente")
  enlace_pago       enlace_pago[]
  HistorialPago     HistorialPago[]

  @@map("deudas")
}

model Empresa {
  id_empresa            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_empresa        String
  logo_empresa          String?
  telefono_empresa      String?
  email_empresa         String
  fecha_actualizacion   DateTime    @default(now()) @db.Timestamptz(6)
  estado_empresa        String?
  ciudad_empresa        String?
  codigo_postal_empresa String?
  calle_empresa         String?
  colonia_empresa       String?
  latitud_empresa       String?
  longitud_empresa      String?
  Admin                 Admin[]
  Apartado              Apartado[]
  RedSocial             RedSocial[]

  @@map("empresa")
}

model HistorialPago {
  id_pago           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referencia_pago   String?
  estado_pago       String
  concepto          String?
  fecha_pago        DateTime @default(now()) @db.Timestamptz(6)
  observaciones     String?
  importe           Decimal  @db.Decimal(12, 2)
  intentos_fallidos Int      @default(0)
  id_cliente        String   @db.Uuid
  id_deuda          String   @db.Uuid
  Cliente           Cliente  @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_historial_cliente")
  Deuda             Deuda    @relation(fields: [id_deuda], references: [id_deuda], onDelete: NoAction, onUpdate: NoAction, map: "fk_historial_deuda")

  @@map("historial_pagos")
}

model Inquilino {
  id_inquilino        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_inquilino    String
  apellido_paterno    String
  apellido_materno    String?
  email_inquilino     String              @unique
  telefono_inquilino  String?
  direccion_inquilino String?
  estado_inquilino    Boolean             @default(true)
  fecha_registro      DateTime            @default(now()) @db.Timestamptz(6)
  password            String
  foto_inquilino      String?
  clave_pasarelas     clave_pasarelas[]
  Cliente             Cliente[]
  Configuracion       Configuracion[]
  RecordatorioEmail   RecordatorioEmail[]

  @@map("inquilinos")
}

model InteraccionChatbot {
  id_interaccion    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mensaje_enviado   String?
  mensaje_recibido  String?
  fecha_interaccion DateTime @default(now()) @db.Timestamptz(6)
  id_cliente        String   @db.Uuid
  Cliente           Cliente  @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_interaccion_cliente")

  @@map("interaccion_chatbot")
}

model RedSocial {
  id_red     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_red String
  logo_red   String?
  enlace     String
  id_empresa String  @db.Uuid
  Empresa    Empresa @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction, map: "fk_redes_empresa")

  @@map("redes_sociales")
}

model RecordatorioEmail {
  id_email         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_inquilino     String        @db.Uuid
  id_cliente       String        @db.Uuid
  id_configuracion String        @db.Uuid
  siguiente_email  DateTime      @db.Timestamptz(6)
  ultimo_email     DateTime?     @db.Timestamptz(6)
  Cliente          Cliente       @relation(fields: [id_cliente], references: [id_cliente], onDelete: Cascade, onUpdate: NoAction)
  Configuracion    Configuracion @relation(fields: [id_configuracion], references: [id_configuracion], onUpdate: NoAction)
  Inquilino        Inquilino     @relation(fields: [id_inquilino], references: [id_inquilino], onDelete: Cascade, onUpdate: NoAction)

  @@index([siguiente_email], map: "ix_emails_siguiente")
  @@map("emails_enviados")
}

model clave_pasarelas {
  id_credencial       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_inquilino        String        @db.Uuid
  pasarela            pasarela_t
  credenciales_api    String        @db.VarChar(512)
  fecha_registro      DateTime      @default(now()) @db.Timestamptz(6)
  fecha_actualizacion DateTime?     @db.Timestamptz(6)
  estado              estado_cred_t @default(ACTIVO)
  client_secret       String?       @db.VarChar(120)
  inquilinos          Inquilino     @relation(fields: [id_inquilino], references: [id_inquilino], onDelete: NoAction, onUpdate: NoAction, map: "fk_clave_inquilino")
  enlace_pago         enlace_pago[]
}

model enlace_pago {
  id_enlace       String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_exterior     String?         @unique @db.VarChar(120)
  url             String
  monto           Decimal?        @db.Decimal(10, 2)
  moneda          String          @default("MXN") @db.Char(3)
  estado          estado_enlace_t @default(pendiente)
  comision        Decimal?        @db.Decimal(10, 2)
  monto_neto      Decimal?        @db.Decimal(10, 2)
  creado_en       DateTime        @default(now()) @db.Timestamptz(6)
  pagado_en       DateTime?       @db.Timestamptz(6)
  vence_en        DateTime?       @db.Timestamptz(6)
  id_deuda        String          @db.Uuid
  id_credencial   String          @db.Uuid
  clave_pasarelas clave_pasarelas @relation(fields: [id_credencial], references: [id_credencial], onDelete: NoAction, onUpdate: NoAction, map: "fk_enlace_credencial")
  deudas          Deuda           @relation(fields: [id_deuda], references: [id_deuda], onDelete: NoAction, onUpdate: NoAction, map: "fk_enlace_deuda")
}

model Apartado {
  id_apartado       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_empresa        String      @db.Uuid
  nombre_apartado   String
  activo_apartado   Boolean     @default(true)
  mostrar_categoria Boolean     @default(false)
  id_plantilla      String      @db.Uuid
  fecha_creacion    DateTime    @default(now()) @db.Timestamptz(6)
  orden             Int         @default(0)
  Empresa           Empresa     @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade, onUpdate: NoAction, map: "fk_apartado_empresa")
  Plantilla         Plantilla   @relation(fields: [id_plantilla], references: [id_plantilla], onDelete: Cascade, onUpdate: NoAction, map: "fk_apartado_plantilla")
  categoria         categoria[]

  @@index([orden], map: "idx_apartado_orden")
  @@map("apartado")
}

model Contenido {
  id_contenido     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_seccion       String  @db.Uuid
  titulo_contenido String
  texto_contenido  String?
  multimedia_url   String?
  orden            Int     @default(0)
  Seccion          Seccion @relation(fields: [id_seccion], references: [id_seccion], onDelete: Cascade, onUpdate: NoAction)

  @@index([id_seccion, orden], map: "idx_contenido_orden")
  @@map("contenido")
}

model Seccion {
  id_seccion     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titulo_seccion String
  texto_seccion  String?
  imagen_url     String?
  activo_seccion Boolean     @default(true)
  fecha_creacion DateTime    @default(now()) @db.Timestamptz(6)
  tipo_seccion   String      @default("general")
  id_categoria   String?     @db.Uuid
  orden          Int         @default(0)
  Contenido      Contenido[]
  Categoria      categoria?  @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, onUpdate: NoAction, map: "seccion_categoria_fkey")

  @@index([id_categoria, orden], map: "idx_seccion_orden")
  @@map("seccion")
}

model Plantilla {
  id_plantilla          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_plantilla      String
  descripcion_plantilla String?
  fecha_creacion        DateTime?  @default(now()) @db.Timestamptz(6)
  Apartado              Apartado[]

  @@map("plantilla")
}

model categoria {
  id_categoria     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_categoria String
  titulo_categoria String?
  texto_categoria  String?
  imagen_categoria String?
  fecha_creacion   DateTime  @default(now()) @db.Timestamp(6)
  activo_categoria Boolean   @default(true)
  id_apartado      String    @db.Uuid
  orden            Int       @default(0)
  apartado         Apartado  @relation(fields: [id_apartado], references: [id_apartado], onDelete: Cascade, onUpdate: NoAction)
  Seccion          Seccion[]

  @@index([id_apartado, orden], map: "idx_categoria_orden")
}

enum estado_cred_t {
  ACTIVO
  INACTIVO
}

enum estado_enlace_t {
  pendiente
  pagado
  expirado
  cancelado
}

enum pasarela_t {
  stripe
  mercadopago
  paypal
}
