import { prisma } from '../../db/client';
import { sendEmail } from '../recordatorios/ControlEmails';

// Verificar suscripciones vencidas (periodo de gracia terminado)
export const verifyExpiredSubscriptions = async () => {
  try {
    const now = new Date();
    const diasGracia = 3;

    // Buscar suscripciones que pasaron el per√≠odo de gracia
    const suscripcionesVencidas = await prisma.suscripciones.findMany({
      where: {
        estado_suscripcion: 'pago_vencido',
        fecha_renovacion: {
          lt: new Date(now.getTime() - (diasGracia * 24 * 60 * 60 * 1000))
        }
      }
    });

    if (suscripcionesVencidas.length > 0) {
      // Marcar como vencidas definitivamente
      const result = await prisma.suscripciones.updateMany({
        where: {
          id_suscripcion: {
            in: suscripcionesVencidas.map(s => s.id_suscripcion)
          }
        },
        data: {
          estado_suscripcion: 'vencida',
          actualizado_en: now
        }
      });
    }

    // Verificar suscripciones que deben renovarse hoy
    const inicioDelDia = new Date(now);
    inicioDelDia.setHours(0, 0, 0, 0);
    
    const finDelDia = new Date(now);
    finDelDia.setHours(23, 59, 59, 999);

    const suscripcionesParaRenovar = await prisma.suscripciones.findMany({
      where: {
        estado_suscripcion: 'activa',
        fecha_renovacion: {
          gte: inicioDelDia,
          lte: finDelDia
        }
      }
    });

  } catch (error) {
    console.error('Error verificando suscripciones vencidas:', error);
  }
};

// Limpiar datos antiguos (solo una vez al d√≠a)
export const cleanOldData = async () => {
  try {
    
    const tresMesesAtras = new Date();
    tresMesesAtras.setMonth(tresMesesAtras.getMonth() - 3);
    
    // Eliminar suscripciones canceladas muy antiguas
    const suscripcionesBorradas = await prisma.suscripciones.deleteMany({
      where: {
        estado_suscripcion: 'cancelada',
        fecha_cancelacion: {
          lt: tresMesesAtras
        }
      }
    });


    // Para recursos hu√©rfanos, necesitamos hacerlo diferente
    // Primero obtener IDs de suscripciones que existen
    const suscripcionesExistentes = await prisma.suscripciones.findMany({
      select: { id_suscripcion: true }
    });

    const idsExistentes = suscripcionesExistentes.map(s => s.id_suscripcion);

    // Eliminar recursos que no tienen suscripci√≥n v√°lida
    const recursosHuerfanos = await prisma.recursos.deleteMany({
      where: {
        id_suscripcion: {
          notIn: idsExistentes
        }
      }
    });

    
  } catch (error) {
    console.error('Error limpiando datos antiguos:', error);
  }
};

// Funci√≥n para enviar notificaciones de suscripci√≥n
export const sendSubscriptionNotifications = async () => {
  try {
    const now = new Date();
    console.log('üìß Verificando notificaciones de suscripci√≥n...');

    // 1. NOTIFICACI√ìN: 2 d√≠as antes del vencimiento
    await notify2DaysBeforeExpiry(now);
    
    // 2. NOTIFICACI√ìN: 1 d√≠a antes del vencimiento  
    await notify1DayBeforeExpiry(now);
    
    // 3. NOTIFICACI√ìN: D√≠a del vencimiento
    await notifyExpiryDay(now);
    
    // 4. NOTIFICACI√ìN: 1 d√≠a en per√≠odo de gracia
    await notifyGraceDay1(now);
    
    // 5. NOTIFICACI√ìN: 2 d√≠as en per√≠odo de gracia (√∫ltimo d√≠a)
    await notifyGraceDay2(now);
    
    console.log('‚úÖ Verificaci√≥n de notificaciones completada');
    
  } catch (error) {
    console.error('‚ùå Error enviando notificaciones:', error);
  }
};

// Notificaci√≥n: 2 d√≠as antes del vencimiento
const notify2DaysBeforeExpiry = async (now: Date) => {
  const en2Dias = new Date(now);
  en2Dias.setDate(now.getDate() + 2);
  
  const suscripciones = await prisma.suscripciones.findMany({
    where: {
      estado_suscripcion: 'activa',
      fecha_renovacion: {
        gte: new Date(en2Dias.setHours(0, 0, 0, 0)),
        lte: new Date(en2Dias.setHours(23, 59, 59, 999))
      }
    },
    include: {
      inquilinos: true,
      Planes: true
    }
  });

  for (const suscripcion of suscripciones) {
    const titulo = '‚ö†Ô∏è Tu suscripci√≥n vence en 2 d√≠as';
    const mensaje = `
Hola ${suscripcion.inquilinos.nombre_inquilino},

Tu suscripci√≥n al plan "${suscripcion.Planes.nombre_plan}" vence en 2 d√≠as (${suscripcion.fecha_renovacion.toLocaleDateString()}).

Aseg√∫rate de que tu m√©todo de pago est√© actualizado para evitar interrupciones en el servicio.

Si tienes alguna pregunta, no dudes en contactarnos.

Saludos,
Equipo de Soporte
    `.trim();

    await sendEmail(
      suscripcion.inquilinos.email_inquilino,
      titulo,
      mensaje
    );
    
    console.log(`üìß Notificaci√≥n 2 d√≠as enviada a: ${suscripcion.inquilinos.email_inquilino}`);
  }
};

// Notificaci√≥n: 1 d√≠a antes del vencimiento
const notify1DayBeforeExpiry = async (now: Date) => {
  const manana = new Date(now);
  manana.setDate(now.getDate() + 1);
  
  const suscripciones = await prisma.suscripciones.findMany({
    where: {
      estado_suscripcion: 'activa',
      fecha_renovacion: {
        gte: new Date(manana.setHours(0, 0, 0, 0)),
        lte: new Date(manana.setHours(23, 59, 59, 999))
      }
    },
    include: {
      inquilinos: true,
      Planes: true
    }
  });

  for (const suscripcion of suscripciones) {
    const titulo = 'üö® Tu suscripci√≥n vence ma√±ana';
    const mensaje = `
Hola ${suscripcion.inquilinos.nombre_inquilino},

Tu suscripci√≥n al plan "${suscripcion.Planes.nombre_plan}" vence ma√±ana (${suscripcion.fecha_renovacion.toLocaleDateString()}).

¬°ACCI√ìN REQUERIDA! Verifica tu m√©todo de pago para evitar la interrupci√≥n del servicio.

Si no se procesa el pago, tendr√°s 3 d√≠as de gracia para resolver cualquier problema.

Saludos,
Equipo de Soporte
    `.trim();

    await sendEmail(
      suscripcion.inquilinos.email_inquilino,
      titulo,
      mensaje
    );
    
    console.log(`üìß Notificaci√≥n 1 d√≠a enviada a: ${suscripcion.inquilinos.email_inquilino}`);
  }
};

// Notificaci√≥n: D√≠a del vencimiento
const notifyExpiryDay = async (now: Date) => {
  const hoy = new Date(now);
  
  const suscripciones = await prisma.suscripciones.findMany({
    where: {
      estado_suscripcion: 'pago_vencido', // Ya cambi√≥ a pago_vencido
      fecha_renovacion: {
        gte: new Date(hoy.setHours(0, 0, 0, 0)),
        lte: new Date(hoy.setHours(23, 59, 59, 999))
      }
    },
    include: {
      inquilinos: true,
      Planes: true
    }
  });

  for (const suscripcion of suscripciones) {
    const titulo = 'üí≥ Tu suscripci√≥n ha vencido - 3 d√≠as de gracia';
    const mensaje = `
Hola ${suscripcion.inquilinos.nombre_inquilino},

Tu suscripci√≥n al plan "${suscripcion.Planes.nombre_plan}" venci√≥ hoy, pero no te preocupes.

Tienes 3 d√≠as de gracia para resolver cualquier problema con tu m√©todo de pago. Durante este tiempo, mantienes acceso completo al servicio.

Por favor, actualiza tu informaci√≥n de pago lo antes posible.

Saludos,
Equipo de Soporte
    `.trim();

    await sendEmail(
      suscripcion.inquilinos.email_inquilino,
      titulo,
      mensaje
    );
    
    console.log(`üìß Notificaci√≥n vencimiento enviada a: ${suscripcion.inquilinos.email_inquilino}`);
  }
};

// Notificaci√≥n: 1 d√≠a en per√≠odo de gracia
const notifyGraceDay1 = async (now: Date) => {
  const ayer = new Date(now);
  ayer.setDate(now.getDate() - 1);
  
  const suscripciones = await prisma.suscripciones.findMany({
    where: {
      estado_suscripcion: 'pago_vencido',
      fecha_renovacion: {
        gte: new Date(ayer.setHours(0, 0, 0, 0)),
        lte: new Date(ayer.setHours(23, 59, 59, 999))
      }
    },
    include: {
      inquilinos: true,
      Planes: true
    }
  });

  for (const suscripcion of suscripciones) {
    const titulo = '‚è∞ Te quedan 2 d√≠as de gracia';
    const mensaje = `
Hola ${suscripcion.inquilinos.nombre_inquilino},

Tu suscripci√≥n lleva 1 d√≠a vencida. Te quedan 2 d√≠as de gracia antes de que se suspenda tu acceso.

Plan: ${suscripcion.Planes.nombre_plan}
Fecha de vencimiento: ${suscripcion.fecha_renovacion.toLocaleDateString()}

Por favor, actualiza tu m√©todo de pago urgentemente.

Saludos,
Equipo de Soporte
    `.trim();

    await sendEmail(
      suscripcion.inquilinos.email_inquilino,
      titulo,
      mensaje
    );
    
    console.log(`üìß Notificaci√≥n gracia d√≠a 1 enviada a: ${suscripcion.inquilinos.email_inquilino}`);
  }
};

// Notificaci√≥n: 2 d√≠as en per√≠odo de gracia (√∫ltimo d√≠a)
const notifyGraceDay2 = async (now: Date) => {
  const hace2Dias = new Date(now);
  hace2Dias.setDate(now.getDate() - 2);
  
  const suscripciones = await prisma.suscripciones.findMany({
    where: {
      estado_suscripcion: 'pago_vencido',
      fecha_renovacion: {
        gte: new Date(hace2Dias.setHours(0, 0, 0, 0)),
        lte: new Date(hace2Dias.setHours(23, 59, 59, 999))
      }
    },
    include: {
      inquilinos: true,
      Planes: true
    }
  });

  for (const suscripcion of suscripciones) {
    const titulo = 'üö® √öLTIMO D√çA - Tu acceso se suspende ma√±ana';
    const mensaje = `
Hola ${suscripcion.inquilinos.nombre_inquilino},

Este es tu √∫ltimo d√≠a de gracia. Ma√±ana se suspender√° tu acceso al sistema si no actualizas tu m√©todo de pago.

Plan: ${suscripcion.Planes.nombre_plan}
Fecha de vencimiento: ${suscripcion.fecha_renovacion.toLocaleDateString()}

¬°ACCI√ìN URGENTE REQUERIDA!

Actualiza tu m√©todo de pago ahora para evitar la suspensi√≥n del servicio.

Saludos,
Equipo de Soporte
    `.trim();

    await sendEmail(
      suscripcion.inquilinos.email_inquilino,
      titulo,
      mensaje
    );
    
    console.log(`üìß Notificaci√≥n √∫ltimo d√≠a enviada a: ${suscripcion.inquilinos.email_inquilino}`);
  }
};

